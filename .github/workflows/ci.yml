name: Production Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

jobs:
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install frontend dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install backend tooling
        run: |
          python -m pip install --upgrade pip
          pip install ruff semgrep

      - name: Run Ruff
        if: hashFiles('**/*.py') != ''
        run: ruff check .

      - name: Run ESLint
        if: hashFiles('package.json') != ''
        run: npm run lint --if-present

      - name: Run Prettier check
        if: hashFiles('package.json') != ''
        run: npm run format:check --if-present

      - name: npm audit
        if: hashFiles('package-lock.json') != ''
        run: npm audit --production --audit-level=high

      - name: Run Semgrep
        run: semgrep scan --config auto --json --output=semgrep-report.json

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.17.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH

      - name: Run tfsec
        if: hashFiles('**/*.tf') != ''
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working-directory: .
          sarif_file: tfsec-results.sarif

      - name: Set up TFLint
        if: hashFiles('**/*.tf') != ''
        uses: terraform-linters/setup-tflint@v3

      - name: Run TFLint
        if: hashFiles('**/*.tf') != ''
        run: |
          tflint --init
          tflint --recursive --format junit > tflint-report.xml

      - name: Upload quality artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports
          path: |
            semgrep-report.json
            trivy-results.sarif
            tfsec-results.sarif
            tflint-report.xml
          if-no-files-found: ignore

  unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov sqlalchemy[asyncio] alembic
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run backend unit tests
        run: |
          status=0
          pytest --maxfail=1 --disable-warnings --cov=. --cov-report=xml --cov-fail-under=80 || status=$?
          if [ "$status" -eq 5 ]; then
            echo "No backend unit tests were collected."
            exit 0
          fi
          exit $status

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install frontend dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Run frontend unit tests
        if: hashFiles('package.json') != ''
        run: npm run test --if-present -- --coverage

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-coverage
          path: |
            coverage.xml
            coverage
            coverage/lcov.info
          if-no-files-found: ignore

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: app_test
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d app_test" --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
    env:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/app_test
      REDIS_URL: redis://localhost:6379/0
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov sqlalchemy[asyncio] alembic asyncpg
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Alembic migrations
        if: hashFiles('alembic.ini') != ''
        run: alembic upgrade head

      - name: Run backend integration tests
        run: |
          status=0
          pytest -m "integration" --cov=. --cov-append --cov-report=xml || status=$?
          if [ "$status" -eq 5 ]; then
            echo "No backend integration tests were collected."
            exit 0
          fi
          exit $status

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install frontend dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Run frontend integration tests
        if: hashFiles('package.json') != ''
        run: npm run test:integration --if-present

      - name: Upload integration artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-reports
          path: |
            coverage.xml
            test-results
          if-no-files-found: ignore

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install frontend dependencies
        if: hashFiles('package-lock.json') != ''
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        run: npx playwright test --reporter=junit,line

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore

  docker_image:
    name: Build & Push Container
    runs-on: ubuntu-latest
    needs: e2e
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and (optionally) push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  sbom:
    name: Generate SBOMs
    runs-on: ubuntu-latest
    needs: docker_image
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate Python SBOM
        if: hashFiles('**/*.py') != ''
        uses: CycloneDX/gh-python-generate-sbom@v1
        with:
          output: sbom-backend.json

      - name: Generate Node.js SBOM
        if: hashFiles('package-lock.json') != ''
        uses: CycloneDX/gh-node-generate-sbom@v1
        with:
          output: sbom-frontend.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom-backend.json
            sbom-frontend.json
          if-no-files-found: ignore

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: sbom
    if: github.event_name != 'pull_request'
    environment: staging
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Authenticate to EKS
        uses: aws-actions/amazon-eks-login@v1
        with:
          cluster-name: ${{ secrets.STAGING_EKS_CLUSTER }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Deploy application chart
        run: |
          helm upgrade --install portfolio-app ./deploy/helm \
            --namespace staging \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set ingress.enabled=true

  k6:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy_staging
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run k6 tests
        if: hashFiles('tests/performance/load-test.js') != ''
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/performance/load-test.js
          flags: --vus 50 --duration 1m

      - name: Skip missing k6 script
        if: hashFiles('tests/performance/load-test.js') == ''
        run: echo "No k6 performance script found; skipping load tests."

      - name: Upload k6 report
        if: always() && hashFiles('tests/performance/load-test.js') != ''
        uses: actions/upload-artifact@v4
        with:
          name: k6-report
          path: k6-results
          if-no-files-found: ignore

  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: k6
    if: github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_PROD_ROLE_TO_ASSUME }}

      - name: Authenticate to EKS
        uses: aws-actions/amazon-eks-login@v1
        with:
          cluster-name: ${{ secrets.PROD_EKS_CLUSTER }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Deploy production chart
        run: |
          helm upgrade --install portfolio-app ./deploy/helm \
            --namespace production \
            --create-namespace \
            --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \
            --set image.tag=${{ github.sha }} \
            --set ingress.enabled=true

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - quality
      - unit
      - integration
      - e2e
      - docker_image
      - sbom
      - deploy_staging
      - k6
      - deploy_prod
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
    steps:
      - name: Prepare notification summary
        id: summary
        run: |
          QUALITY='${{ needs.quality.result }}'
          UNIT='${{ needs.unit.result }}'
          INTEGRATION='${{ needs.integration.result }}'
          E2E='${{ needs.e2e.result }}'
          DOCKER='${{ needs.docker_image.result }}'
          SBOM='${{ needs.sbom.result }}'
          STAGING='${{ needs.deploy_staging.result }}'
          PERF='${{ needs.k6.result }}'
          PROD='${{ needs.deploy_prod.result }}'
          OVERALL="success"
          for result in "$QUALITY" "$UNIT" "$INTEGRATION" "$E2E" "$DOCKER" "$SBOM" "$STAGING" "$PERF" "$PROD"; do
            if [ "$result" = "failure" ]; then
              OVERALL="failure"
              break
            fi
            if [ "$result" = "cancelled" ] && [ "$OVERALL" = "success" ]; then
              OVERALL="cancelled"
            fi
          done
          echo "overall=$OVERALL" >> $GITHUB_OUTPUT

      - name: Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"${{ github.workflow }} run ${{ github.run_number }} for ${{ github.repository }} status: ${{ steps.summary.outputs.overall }}"}' \
            "$SLACK_WEBHOOK_URL"

      - name: Teams notification
        if: env.TEAMS_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-Type: application/json' \
            --data '{"text":"${{ github.workflow }} run ${{ github.run_number }} for ${{ github.repository }} status: ${{ steps.summary.outputs.overall }}"}' \
            "$TEAMS_WEBHOOK_URL"
