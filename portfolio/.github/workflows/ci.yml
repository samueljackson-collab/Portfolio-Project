name: CI/CD

on:
  push:
    branches: [main]
  pull_request:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_NAME: portfolio/app

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r backend/requirements.txt
      - name: Run Ruff
        run: ruff check backend/app
      - name: Run Bandit
        run: bandit -c pyproject.toml -r backend/app
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install frontend dependencies
        run: npm install
      - name: Run ESLint
        run: npm run lint --workspace frontend
      - name: Terraform Fmt
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - name: Terraform formatting check
        run: terraform fmt -check -recursive infra
      - name: TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.48.0
      - name: Run TFLint
        run: tflint --chdir=infra
      - name: Run tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.3
        with:
          working_directory: infra
          github_token: ${{ github.token }}
          soft_fail: true

  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
      - name: Run pytest with coverage
        run: |
          cd backend
          pytest --cov=app --cov-report=xml
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - name: Install frontend dependencies
        run: npm install
      - name: Run frontend tests
        run: npm run test --workspace frontend -- --run
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: backend/coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:sha-${{ github.sha }}
      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:sha-${{ github.sha }}

  scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.14.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          exit-code: '0'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          path: '.'
      - name: npm audit
        run: npm audit --audit-level=high || true

  push-image:
    needs: scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest

  deploy-staging:
    needs: push-image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure kubectl
        run: echo "Configuring kubectl for staging..."
      - name: Helm Deploy
        run: |
          helm upgrade --install portfolio tools/k8s/portfolio-chart \
            --values tools/k8s/portfolio-chart/values.yaml \
            --set image.backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest \
            --set image.frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        shell: bash

  performance:
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install k6
        run: sudo apt-get update && sudo apt-get install -y gnupg software-properties-common && curl -s https://dl.k6.io/key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/k6-archive-keyring.gpg && echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list && sudo apt-get update && sudo apt-get install -y k6
      - name: Run performance smoke test
        env:
          API_BASE_URL: https://staging.example.com
        run: k6 run tools/perf/k6-smoke.js

  release:
    needs: performance
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create release tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="v$(date +%Y.%m.%d.%H%M%S)"
          gh release create "$VERSION" --notes "Automated release from CI pipeline"
