
name: CI

on:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

jobs:
  quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      - name: Install backend deps
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Ruff
        run: cd backend && ruff check .
      - name: Black
        run: cd backend && black --check .
      - name: isort
        run: cd backend && isort --check-only .
      - name: Bandit
        run: cd backend && bandit -ll -r app
      - name: Frontend deps
        run: cd frontend && npm ci
      - name: ESLint
        run: cd frontend && npm run lint
      - name: Prettier
        run: cd frontend && npm run format -- --check
      - name: npm audit (soft fail)
        run: cd frontend && (npm audit || true)
      - name: Terraform fmt
        run: cd infra && terraform fmt -recursive -check
      - name: TFLint
        run: cd infra && tflint
      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.28.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: infra
      - name: Trivy fs scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          format: 'sarif'
          output: trivy-results.sarif
      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  unit:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run pytest
        run: |
          cd backend
          pytest --maxfail=1 --disable-warnings
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/.coverage*
          if-no-files-found: ignore

  integration:
    runs-on: ubuntu-latest
    needs: unit
    services:
      postgres:
        image: postgres:16
        ports: ['5432:5432']
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 5s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Integration tests
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/app
        run: |
          cd backend
          pytest tests/test_content.py -q

  build:
    runs-on: ubuntu-latest
    needs: integration
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Frontend build
        run: cd frontend && npm ci && npm run build
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Backend package
        run: cd backend && pip install -r requirements.txt
      - name: Docker login
        if: secrets.GHCR_TOKEN != ''
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build backend image
        run: docker build -t ghcr.io/${{ github.repository }}/backend:latest backend
      - name: Build frontend image
        run: docker build -t ghcr.io/${{ github.repository }}/frontend:latest frontend
      - name: Push backend image
        if: secrets.GHCR_TOKEN != ''
        run: docker push ghcr.io/${{ github.repository }}/backend:latest
      - name: Push frontend image
        if: secrets.GHCR_TOKEN != ''
        run: docker push ghcr.io/${{ github.repository }}/frontend:latest

  sbom:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Generate CycloneDX SBOM
        run: |
          npm install -g @cyclonedx/cyclonedx-npm
          cd frontend && npx @cyclonedx/cyclonedx-npm --output ../../frontend-sbom.json
      - uses: cyclonedx/cyclonedx-python@v2.7.2
        with:
          path: backend
          output: ../backend-sbom.json
      - uses: actions/upload-artifact@v4
        with:
          name: sboms
          path: |
            frontend-sbom.json
            backend-sbom.json

  stage_deploy:
    runs-on: ubuntu-latest
    needs: sbom
    steps:
      - uses: actions/checkout@v4
      - name: Helm lint
        run: cd infra/helm/portfolio-chart && helm lint
      - name: Helm dry-run
        run: cd infra/helm/portfolio-chart && helm template portfolio . -f values.yaml

  perf:
    runs-on: ubuntu-latest
    needs: stage_deploy
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: k6 smoke (stub)
        run: echo "k6 smoke would execute here" && ls scripts/k6-smoke.js

  release:
    runs-on: ubuntu-latest
    needs: perf
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4
      - name: Production gate
        run: echo "Manual approval required for production deploy"
